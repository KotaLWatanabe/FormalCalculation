// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.arithmetic

/** 型変換と定数の定義 */
object IntegerOps {

  extension (n: Int) {
    /** IntからIntegerへの変換 */
    def toInteger: Integer = Integer.fromInt(n)

    /** IntからNaturalへの変換 */
    def toNatural: Natural = {
      require(n >= 0, s"Cannot convert negative integer $n to Natural")
      Natural.fromInt(n)
    }
  }
  
  extension (n: Natural) {
    /** NaturalからIntへの変換 */
    def toInt: Int = Natural.naturalToInt(n)
  }
  
  extension (i: Integer) {
    /** IntegerからIntへの変換 */
    def toInt: Int = integerToInt(i)
  }

  /** 型変換メソッド */
  object Conversions {
    /** NaturalからIntegerへの暗黙的変換 */
    implicit inline def naturalToInteger(n: Natural): Integer = Integer.fromNatural(n)
    
    /** IntからNaturalへの変換 */
    inline def intToNatural(n: Int): Natural = n.toNatural
    
    /** IntからIntegerへの変換 */
    inline def intToInteger(n: Int): Integer = n.toInteger
  }
  
  /** 便利な定数 */
  object Constants {
    val Zero: Integer = Integer.zero
    val One: Integer = Integer.fromInt(1)
    val MinusOne: Integer = Integer.fromInt(-1)
    val Two: Integer = Integer.fromInt(2)
    
    val NaturalZero: Natural = Natural.zero
    val NaturalOne: Natural = Natural.fromInt(1)
    val NaturalTwo: Natural = Natural.fromInt(2)
    
    val NonZeroOne: NonZeroInteger = NonZeroInteger.fromIntUnsafe(1)
    val NonZeroMinusOne: NonZeroInteger = NonZeroInteger.fromIntUnsafe(-1)
    val NonZeroTwo: NonZeroInteger = NonZeroInteger.fromIntUnsafe(2)
  }
  
  /** 整数を文字列に変換 */
  def integerToString(i: Integer): String = 
    if (i.isZero) "0"
    else if (i.isPositive) Natural.naturalToString(i.abs)
    else "-" + Natural.naturalToString(i.abs)
  
  /** 整数をIntに変換 */
  def integerToInt(i: Integer): Int = 
    if (i.isZero) 0
    else if (i.isPositive) Natural.naturalToInt(i.abs)
    else -Natural.naturalToInt(i.abs)
}