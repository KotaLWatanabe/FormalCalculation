// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.arithmetic.impl

import com.formalcalculation.arithmetic.{NonZeroInteger, Natural, Sign, SignPositive, SignNegative}

/** 正のゼロでない整数の実装 */
final case class NonZeroIntegerPositive(value: Natural) extends NonZeroInteger {
  require(!value.isZero, "Positive integer cannot be zero")

  inline def isPositive: Boolean = true
  inline def isNegative: Boolean = false
  
  inline def abs: Natural = value
  inline def sign: Sign = SignPositive
  
  inline def toInteger: com.formalcalculation.arithmetic.Integer = 
    com.formalcalculation.arithmetic.Integer.positive(value)
}

/** 負のゼロでない整数の実装 */
final case class NonZeroIntegerNegative(value: Natural) extends NonZeroInteger {
  require(!value.isZero, "Negative integer cannot be zero")

  inline def isPositive: Boolean = false
  inline def isNegative: Boolean = true
  
  inline def abs: Natural = value
  inline def sign: Sign = SignNegative
  
  inline def toInteger: com.formalcalculation.arithmetic.Integer = 
    com.formalcalculation.arithmetic.Integer.negative(value)
}