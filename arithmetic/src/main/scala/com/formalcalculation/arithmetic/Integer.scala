// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.arithmetic

/** 整数をOption[NonZeroInteger]として実装 */
trait Integer extends ComparisonOps[Integer] with EqualityOps[Integer] {
  /** Option[NonZeroInteger]としての表現を取得 */
  def toOption: Option[NonZeroInteger]
  
  /** ゼロかどうか */
  inline def isZero: Boolean = toOption.isEmpty
  
  /** 正数かどうか */
  inline def isPositive: Boolean = toOption.exists(_.isPositive)
  
  /** 負数かどうか */
  inline def isNegative: Boolean = toOption.exists(_.isNegative)
  
  /** 絶対値 */
  inline def abs: Natural = toOption.map(_.abs).getOrElse(Natural.zero)
  
  /** 符号 */
  inline def sign: Sign = toOption.map(_.sign).getOrElse(Sign.zero)
  
  // 基本演算子オーバーロード
  inline def +(other: Integer): Integer = Integer.add(this, other)
  inline def -(other: Integer): Integer = Integer.subtract(this, other)
  inline def *(other: Integer): Integer = Integer.multiply(this, other)
  inline def /(other: Integer): Option[Integer] = Integer.divide(this, other)
  inline def %(other: Integer): Option[Integer] = Integer.remainder(this, other)
  inline def **(exponent: Natural): Integer = Integer.power(this, exponent)
  inline def unary_- : Integer = Integer.negate(this)
  
  // 比較演算子の実装
  inline def compare(other: Integer): Int = Integer.compare(this, other)
  inline def equal(other: Integer): Boolean = Integer.equal(this, other)
  
  // 便利メソッド
  inline def divideWithRemainder(other: Integer): Option[(Integer, Integer)] = Integer.divideWithRemainder(this, other)
  inline def show: String = IntegerOps.integerToString(this)
}

/** 符号 */
trait Sign

/** 符号の実装 */
case object SignPositive extends Sign
case object SignNegative extends Sign  
case object SignZero extends Sign

object Sign {
  inline def positive: Sign = SignPositive
  inline def negative: Sign = SignNegative
  inline def zero: Sign     = SignZero
}

trait IntegerOperations {
  def fromNatural(n: Natural): Integer
  def fromSignAndNatural(sign: Sign, value: Natural): Integer
  def fromInt(n: Int): Integer
  def add(a: Integer, b: Integer): Integer
  def subtract(a: Integer, b: Integer): Integer
  def negate(a: Integer): Integer
  def multiply(a: Integer, b: Integer): Integer
  def divideWithRemainder(dividend: Integer, divisor: Integer): Option[(Integer, Integer)]
  def divide(a: Integer, b: Integer): Option[Integer]
  def remainder(a: Integer, b: Integer): Option[Integer]
  def power(base: Integer, exponent: Natural): Integer
  def compare(a: Integer, b: Integer): Int
  def equal(a: Integer, b: Integer): Boolean
  def abs(a: Integer): Natural
}

object Integer {
  // Factory methods for creating instances
  inline def zero: Integer = impl.IntegerWrapper(None)
  inline def fromNonZero(nz: NonZeroInteger): Integer = impl.IntegerWrapper(Some(nz))
  inline def positive(value: Natural): Integer = 
    if (value.isZero) zero else impl.IntegerWrapper(Some(NonZeroInteger.positive(value)))
  inline def negative(value: Natural): Integer = 
    if (value.isZero) zero else impl.IntegerWrapper(Some(NonZeroInteger.negative(value)))
  
  // Default implementation
  private val defaultOps: IntegerOperations = new impl.IntegerOpsImpl
  
  /** 自然数から整数を作成 */
  inline def fromNatural(n: Natural): Integer = 
    if (n.isZero) zero else fromNonZero(NonZeroInteger.fromNatural(n))

  /** 符号と自然数から整数を作成 */
  inline def fromSignAndNatural(sign: Sign, value: Natural): Integer = 
    if (value.isZero) zero 
    else fromNonZero(NonZeroInteger.fromSignAndNatural(sign, value))

  /** Int値から整数を作成 */
  inline def fromInt(n: Int): Integer = 
    if (n == 0) zero 
    else fromNonZero(NonZeroInteger.fromIntUnsafe(n))

  /** 加算 */
  inline def add(a: Integer, b: Integer): Integer = defaultOps.add(a, b)

  /** 減算 */
  inline def subtract(a: Integer, b: Integer): Integer = defaultOps.subtract(a, b)

  /** 符号反転 */
  inline def negate(a: Integer): Integer = defaultOps.negate(a)

  /** 乗算 */
  inline def multiply(a: Integer, b: Integer): Integer = defaultOps.multiply(a, b)

  /** 除算（商と余り） */
  inline def divideWithRemainder(dividend: Integer, divisor: Integer): Option[(Integer, Integer)] = 
    defaultOps.divideWithRemainder(dividend, divisor)

  /** 商のみを取得 */
  inline def divide(a: Integer, b: Integer): Option[Integer] = defaultOps.divide(a, b)

  /** 余りのみを取得 */
  inline def remainder(a: Integer, b: Integer): Option[Integer] = defaultOps.remainder(a, b)

  /** べき乗（指数は自然数） */
  inline def power(base: Integer, exponent: Natural): Integer = defaultOps.power(base, exponent)

  /** 比較（-1: a < b, 0: a == b, 1: a > b） */
  inline def compare(a: Integer, b: Integer): Int = defaultOps.compare(a, b)

  /** 等価性 */
  inline def equal(a: Integer, b: Integer): Boolean = defaultOps.equal(a, b)

  /** 絶対値 */
  inline def abs(a: Integer): Natural = defaultOps.abs(a)
}