// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.arithmetic

import com.formalcalculation.arithmetic.IntegerOps.Constants.NonZeroOne

/** 有理数（分子: Integer, 分母: NonZeroInteger） */
trait Rational extends ComparisonOps[Rational] with EqualityOps[Rational] {
  def numerator: Integer
  def denominator: NonZeroInteger
  
  /** ゼロかどうか */
  inline def isZero: Boolean = numerator.isZero
  
  /** 正数かどうか */
  inline def isPositive: Boolean = (numerator.isPositive && denominator.isPositive) || 
                                  (numerator.isNegative && denominator.isNegative)
  
  /** 負数かどうか */
  inline def isNegative: Boolean = (numerator.isPositive && denominator.isNegative) || 
                                  (numerator.isNegative && denominator.isPositive)
  
  /** 1かどうか */
  inline def isOne: Boolean = numerator.equal(denominator.toInteger)
  
  /** 符号 */
  inline def sign: Sign = if (isZero) Sign.Zero else if (isPositive) Sign.Positive else Sign.Negative
  
  /** 絶対値 */
  inline def abs: Rational = Rational.abs(this)
  
  // 基本演算子オーバーロード
  inline def +(other: Rational): Rational = Rational.add(this, other)
  inline def -(other: Rational): Rational = Rational.subtract(this, other)
  inline def *(other: Rational): Rational = Rational.multiply(this, other)
  inline def /(other: Rational): Option[Rational] = Rational.divide(this, other)
  inline def **(exponent: Integer): Option[Rational] = Rational.power(this, exponent)
  inline def unary_- : Rational = Rational.negate(this)
  
  // 比較演算子の実装
  inline def compare(other: Rational): Int = Rational.compare(this, other)
  inline def equal(other: Rational): Boolean = Rational.equal(this, other)
  
  // 便利メソッド
  inline def reciprocal: Option[Rational] = Rational.reciprocal(this)
  inline def reduced: Rational = Rational.reduce(this)
  inline def show: String = Rational.rationalToString(this)
  
  /** 整数部分を取得 */
  inline def integerPart: Integer = Rational.integerPart(this)
  
  /** 小数部分を取得 */
  inline def fractionalPart: Rational = Rational.fractionalPart(this)
}

trait RationalOperations {
  def create(numerator: Integer, denominator: NonZeroInteger): Rational
  def fromInteger(n: Integer): Rational
  def fromInt(n: Int): Rational
  def add(a: Rational, b: Rational): Rational
  def subtract(a: Rational, b: Rational): Rational
  def negate(a: Rational): Rational
  def multiply(a: Rational, b: Rational): Rational
  def divide(a: Rational, b: Rational): Option[Rational]
  def reciprocal(a: Rational): Option[Rational]
  def power(base: Rational, exponent: Integer): Option[Rational]
  def compare(a: Rational, b: Rational): Int
  def equal(a: Rational, b: Rational): Boolean
  def abs(a: Rational): Rational
  def reduce(a: Rational): Rational
  def rationalToString(r: Rational): String
  def integerPart(r: Rational): Integer
  def fractionalPart(r: Rational): Rational
}

object Rational {
  // Factory methods for creating instances
  inline def apply(numerator: Integer, denominator: NonZeroInteger): Rational = 
    impl.RationalWrapper(numerator, denominator).reduced
    
  inline def fromInteger(n: Integer): Rational = 
    impl.RationalWrapper(n, NonZeroOne).reduced
    
  inline def fromInt(n: Int): Rational = fromInteger(Integer.fromInt(n))
  
  inline def zero: Rational = fromInteger(Integer.zero)
  inline def one: Rational = fromInteger(Integer.fromInt(1))
  inline def minusOne: Rational = fromInteger(Integer.fromInt(-1))
  
  // Default implementation
  private val defaultOps: RationalOperations = impl.RationalOpsImpl
  
  /** 加算 */
  inline def add(a: Rational, b: Rational): Rational = defaultOps.add(a, b)
  
  /** 減算 */
  inline def subtract(a: Rational, b: Rational): Rational = defaultOps.subtract(a, b)
  
  /** 符号反転 */
  inline def negate(a: Rational): Rational = defaultOps.negate(a)
  
  /** 乗算 */
  inline def multiply(a: Rational, b: Rational): Rational = defaultOps.multiply(a, b)
  
  /** 除算 */
  inline def divide(a: Rational, b: Rational): Option[Rational] = defaultOps.divide(a, b)
  
  /** 逆数 */
  inline def reciprocal(a: Rational): Option[Rational] = defaultOps.reciprocal(a)
  
  /** べき乗 */
  inline def power(base: Rational, exponent: Integer): Option[Rational] = defaultOps.power(base, exponent)
  
  /** 比較 */
  inline def compare(a: Rational, b: Rational): Int = defaultOps.compare(a, b)
  
  /** 等価性 */
  inline def equal(a: Rational, b: Rational): Boolean = defaultOps.equal(a, b)
  
  /** 絶対値 */
  inline def abs(a: Rational): Rational = defaultOps.abs(a)
  
  /** 約分 */
  inline def reduce(a: Rational): Rational = defaultOps.reduce(a)
  
  /** 文字列表現 */
  inline def rationalToString(r: Rational): String = defaultOps.rationalToString(r)
  
  /** 整数部分 */
  inline def integerPart(r: Rational): Integer = defaultOps.integerPart(r)
  
  /** 小数部分 */
  inline def fractionalPart(r: Rational): Rational = defaultOps.fractionalPart(r)
}