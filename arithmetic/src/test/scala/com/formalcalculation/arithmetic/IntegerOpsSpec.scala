// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.arithmetic

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import IntegerOps._

class IntegerOpsSpec extends AnyFlatSpec with Matchers {
  
  "Natural operators" should "work correctly with infix notation" in {
    val zero = Natural.Zero
    val one = Natural.fromInt(1)
    val two = Natural.fromInt(2)
    val three = Natural.fromInt(3)
    val five = Natural.fromInt(5)
    
    // 加算
    (one + two) shouldBe three
    (two + three) shouldBe five
    
    // 乗算
    (two * three) shouldBe Natural.fromInt(6)
    (one * five) shouldBe five
    
    // 減算
    (five - two) shouldBe Some(three)
    (two - five) shouldBe None
    
    // 比較
    (one == one) shouldBe true
    (one != two) shouldBe true
    (one < two) shouldBe true
    (two > one) shouldBe true
    (one <= one) shouldBe true
    (two >= one) shouldBe true
  }
  
  "Integer operators" should "work correctly with infix notation" in {
    val zero = Integer.Zero
    val one = Integer.fromInt(1)
    val minusOne = Integer.fromInt(-1)
    val two = Integer.fromInt(2)
    val three = Integer.fromInt(3)
    val five = Integer.fromInt(5)
    val six = Integer.fromInt(6)
    val eight = Integer.fromInt(8)
    
    // 加算
    (one + two) shouldBe three
    (one + minusOne) shouldBe zero
    
    // 減算
    (five - two) shouldBe three
    (two - five) shouldBe Integer.fromInt(-3)
    
    // 乗算
    (two * three) shouldBe six
    (two * minusOne) shouldBe Integer.fromInt(-2)
    
    // 除算
    (six / two) shouldBe Some(three)
    (five / two) shouldBe Some(two)
    (one / zero) shouldBe None
    
    // 余り
    (five % two) shouldBe Some(one)
    (six % three) shouldBe Some(zero)
    
    // べき乗
    (two ** Natural.fromInt(3)) shouldBe eight
    (minusOne ** Natural.fromInt(2)) shouldBe one
    
    // 単項マイナス
    (-one) shouldBe minusOne
    (-minusOne) shouldBe one
    (-zero) shouldBe zero
    
    // 比較
    (one == one) shouldBe true
    (one != two) shouldBe true
    (one < two) shouldBe true
    (two > one) shouldBe true
    (minusOne < zero) shouldBe true
    (zero > minusOne) shouldBe true
    
    // 絶対値
    one.abs shouldBe Natural.fromInt(1)
    minusOne.abs shouldBe Natural.fromInt(1)
    zero.abs shouldBe Natural.Zero
  }
  
  "Implicit conversions" should "work correctly" in {
    import IntegerOps._
    
    // Int から Integer への変換
    val intOne: Integer = 1
    val intMinusOne: Integer = -1
    val intZero: Integer = 0
    
    intOne shouldBe Integer.fromInt(1)
    intMinusOne shouldBe Integer.fromInt(-1)
    intZero shouldBe Integer.Zero
    
    // Int から Natural への変換（非負の場合）
    val natOne: Natural = 1
    val natTwo: Natural = 2
    val natZero: Natural = 0
    
    natOne shouldBe Natural.fromInt(1)
    natTwo shouldBe Natural.fromInt(2)
    natZero shouldBe Natural.Zero
    
    // 負数は変換できない
    an[IllegalArgumentException] should be thrownBy {
      val natNeg: Natural = -1
    }
  }
  
  "Constants" should "be accessible" in {
    import IntegerOps.Constants._
    
    Zero shouldBe Integer.Zero
    One shouldBe Integer.fromInt(1)
    MinusOne shouldBe Integer.fromInt(-1)
    Two shouldBe Integer.fromInt(2)
    
    NaturalZero shouldBe Natural.Zero
    NaturalOne shouldBe Natural.fromInt(1)
    NaturalTwo shouldBe Natural.fromInt(2)
  }
  
  "Mixed operations" should "work with implicit conversions" in {
    import IntegerOps._
    
    // Integer と Int の混合演算
    val result1 = Integer.fromInt(5) + 3
    result1 shouldBe Integer.fromInt(8)
    
    val result2 = Integer.fromInt(10) - 4
    result2 shouldBe Integer.fromInt(6)
    
    val result3 = Integer.fromInt(3) * 4
    result3 shouldBe Integer.fromInt(12)
    
    // Natural と Int の混合演算
    val result4 = Natural.fromInt(5) + 3
    result4 shouldBe Natural.fromInt(8)
    
    val result5 = Natural.fromInt(3) * 4
    result5 shouldBe Natural.fromInt(12)
  }
  
  "String representation" should "work correctly" in {
    import IntegerOps._
    
    // Natural の文字列表現
    Natural.Zero.show shouldBe "0"
    Natural.fromInt(1).show shouldBe "1"
    Natural.fromInt(5).show shouldBe "5"
    Natural.fromInt(10).show shouldBe "10"
    Natural.fromInt(123).show shouldBe "123"
    
    // Integer の文字列表現
    Integer.Zero.show shouldBe "0"
    Integer.fromInt(1).show shouldBe "1"
    Integer.fromInt(-1).show shouldBe "-1"
    Integer.fromInt(5).show shouldBe "5"
    Integer.fromInt(-5).show shouldBe "-5"
    Integer.fromInt(42).show shouldBe "42"
    Integer.fromInt(-42).show shouldBe "-42"
  }
}