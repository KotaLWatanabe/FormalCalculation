// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.algebra

/** 
 * Semigroup: A set with an associative binary operation
 * 
 * Laws:
 * - Associativity: combine(combine(x, y), z) == combine(x, combine(y, z))
 */
trait Semigroup[A] {
  def combine(x: A, y: A): A
  
  /** Alias for combine */
  def |+|(x: A, y: A): A = combine(x, y)
}

object Semigroup {
  def apply[A](using S: Semigroup[A]): Semigroup[A] = S
  
  /** Create a Semigroup instance from a function */
  def instance[A](f: (A, A) => A): Semigroup[A] = new Semigroup[A] {
    def combine(x: A, y: A): A = f(x, y)
  }
  
  /** Syntax extensions for Semigroup operations */
  extension [A](x: A)(using S: Semigroup[A])
    def |+|(y: A): A = S.combine(x, y)
    def combine(y: A): A = S.combine(x, y)
}