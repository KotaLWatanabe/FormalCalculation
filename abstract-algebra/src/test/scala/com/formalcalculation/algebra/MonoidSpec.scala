// Generated by Claude Sonnet 4 (claude-sonnet-4-20250514)
package com.formalcalculation.algebra

import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.scalatestplus.scalacheck.ScalaCheckPropertyChecks
import org.scalacheck.Gen

class MonoidSpec extends AnyFlatSpec with Matchers with ScalaCheckPropertyChecks {
  
  /**
   * Property-based test for monoid laws
   */
  def testMonoidLaws[A](gen: Gen[A])(using M: Monoid[A]): Unit = {
    
    it should "satisfy left identity law" in {
      forAll(gen) { a =>
        M.combine(M.empty, a) shouldBe a
      }
    }
    
    it should "satisfy right identity law" in {
      forAll(gen) { a =>
        M.combine(a, M.empty) shouldBe a
      }
    }
    
    it should "satisfy associativity law" in {
      forAll(gen, gen, gen) { (a, b, c) =>
        M.combine(M.combine(a, b), c) shouldBe M.combine(a, M.combine(b, c))
      }
    }
  }
  
  "String Monoid" should behave like {
    given M: Monoid[String] = Monoid.stringMonoid
    testMonoidLaws(Gen.alphaStr)
  }
  
  "Int Addition Monoid" should behave like {
    given M: Monoid[Int] = Monoid.intAdditionMonoid
    testMonoidLaws(Gen.choose(-1000, 1000))
  }
  
  "List Monoid" should behave like {
    given M: Monoid[List[Int]] = summon[Monoid[List[Int]]]
    testMonoidLaws(Gen.listOf(Gen.choose(1, 100)))
  }
  
  "Boolean AND Monoid" should behave like {
    given M: Monoid[Boolean] = Monoid.booleanAndMonoid
    testMonoidLaws(Gen.oneOf(true, false))
  }
  
  "Boolean OR Monoid" should behave like {
    given M: Monoid[Boolean] = Monoid.booleanOrMonoid  
    testMonoidLaws(Gen.oneOf(true, false))
  }
}